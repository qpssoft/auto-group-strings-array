!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).autoGroupStrings=e()}}((function(){return function e(o,r,n){function s(i,m){if(!r[i]){if(!o[i]){var l="function"==typeof require&&require;if(!m&&l)return l(i,!0);if(t)return t(i,!0);var f=new Error("Cannot find module '"+i+"'");throw f.code="MODULE_NOT_FOUND",f}var c=r[i]={exports:{}};o[i][0].call(c.exports,(function(e){return s(o[i][1][e]||e)}),c,c.exports,e,o,r,n)}return r[i].exports}for(var t="function"==typeof require&&require,i=0;i<n.length;i++)s(n[i]);return s}({1:[function(e,o,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=(e,{delimiter:o,delimiterRegExp:r,direction:n,caseSensitive:s,includeSingleElementMembers:t}={delimiter:" ",direction:"rtl",caseSensitive:!1,includeSingleElementMembers:!1})=>{void 0===o&&(o=" "),void 0===n&&(n="rtl"),void 0===s&&(s=!1);const i=e.length;let m=[];for(let t=0;t<i;t++){if(r instanceof RegExp){const n=e[t].match(r);o=n&&n[0]||o}if("rtl"===n){let n=e[t].split(r||o).slice().reverse();if(r instanceof RegExp&&1===n.length&&(n=e[t].split(o).slice().reverse()),m.find(e=>e.common===n[0])){const e=m.findIndex(e=>e.common===n[0]);m[e].members.push(t)}else m.push({common:n[0],members:[t],prevWords:[n]});const i=m.findIndex(e=>!0===s?n[0]===e.common:n[0].toLowerCase()===e.common.toLowerCase());m[i].members.push(t);for(let r=1;r<n.length;r++)for(let l=0;l<m[i].prevWords.length;l++)void 0!==m[i].prevWords[l][r]&&(!0===s?m[i].prevWords[l].slice(0,r+1).join(o)===n.slice(0,r+1).join(o):m[i].prevWords[l].slice(0,r+1).join(o).toLowerCase()===n.slice(0,r+1).join(o).toLowerCase())&&m.push({common:n[r]+o+n.slice(0,r).reverse().join(o),members:[e.indexOf(m[i].prevWords[l].slice().reverse().join(o)),t],prevWords:[]});m[i].prevWords.push(n)}else{let n=e[t].split(r||o);if(r instanceof RegExp&&1===n.length&&(n=e[t].split(o)),m.find(e=>e.common===n[0])){const e=m.findIndex(e=>e.common===n[0]);m[e].members.push(t)}else m.push({common:n[0],members:[t],prevWords:[n]});const i=m.findIndex(e=>!0===s?n[0]===e.common:n[0].toLowerCase()===e.common.toLowerCase());m[i].members.push(t);for(let r=1;r<n.length;r++)for(let l=0;l<m[i].prevWords.length;l++)void 0!==m[i].prevWords[l][r]&&(!0===s?m[i].prevWords[l].slice(0,r+1).join(o)===n.slice(0,r+1).join(o):m[i].prevWords[l].slice(0,r+1).join(o).toLowerCase()===n.slice(0,r+1).join(o).toLowerCase())&&m.push({common:n.slice(0,r).join(o)+o+n[r],members:[e.indexOf(m[i].prevWords[l].join(o)),t],prevWords:[]});m[i].prevWords.push(n)}}let l,f=[];l=!0===t?Array.from(new Set(m.map(e=>e.common).concat(e))):Array.from(new Set(m.map(e=>e.common)));for(const o of l){const r=m.filter(e=>e.common===o).map(e=>e.members).flat();!0===t?f.push({common:o,members:Array.from(new Set(r.length>0?r:[e.indexOf(o)]))}):f.push({common:o,members:Array.from(new Set(r))})}return t||(f=f.filter(e=>e.members.length>1)),f};r.default=n,o.exports=n},{}]},{},[1])(1)}));